from types import GeneratorType


class Unique(object):
    def __init__(self, data: tuple or list or GeneratorType, ignore_case: bool = False):
        # С учетом, что указано, что это массив, такое определение типа корректно
        if isinstance(data, GeneratorType):
            data = list(i for i in data)

        self.__cache = []
        self.__ignore_case = ignore_case
        self.__len = len(data)

        if type(data[0]) is str and ignore_case:
            self.__data = [char.lower() for char in data]
            return

        self.__data = data

    def __next__(self):
        if self.__pos >= self.__len:
            raise StopIteration

        while self.__data[self.__pos] in self.__cache:
            self.__pos += 1
            if self.__pos >= self.__len:
                raise StopIteration

        self.__cache.append(self.__data[self.__pos])
        self.__pos += 1

        return self.__data[self.__pos - 1]

    def __iter__(self):
        self.__pos = 0
        return self


if __name__ == "__main__":
    print("Testing...")

    # Testing
    assert tuple(i for i in Unique([1, 1, 1, 1, 1, 2, 2, 2, 2, 2])) == (1, 2), \
        "\n[TestError][#1] -> -Failed-"
    assert tuple(i for i in Unique(['a', 'A', 'b', 'B', 'a', 'A', 'b', 'B'])) == ('a', 'A', 'b', 'B'), \
        "\n[TestError][#2] -> -Failed-"
    assert tuple(i for i in Unique(['a', 'A', 'b', 'B', 'a', 'A', 'b', 'B'],
                                   ignore_case=True)) == ('a', 'b'), \
        "\n[TestError][#3] -> -Failed-"

    print("All tests passed!\n")

    print("Run with args ('title, color'):")
    # Run
    for callback in Unique(['a', 'A', 'b', 'B', 'a', 'A', 'b', 'B'],
                           ignore_case=True):
        print(callback)
